Parameter,Alignment function
mem,"Set the bwa to use the BWA-MEM algorithm, a fast and accurate alignment algorithm optimized for sequences in the range of 70 bp to 1 Mbp"
\-5,"For split alignment, take the alignment with the smallest coordinate (5' end) as primary. The mapq assignment of the primary alignment is calculated independent of the 3' alignment"
\-S,Skip mate rescue
\-P,Skip pairing; mate rescue is performed unless -S also in use
\-T0,"The T flag sets the minimum mapping quality of alignments to output. At this stage we want all the alignments to be recorded and thus T is set to 0, (this will enable us to gather full stats for the library. At later stage we will filter the alignments by mapping quality"
\-t,"Number of threads - default is 1. Set the numbers of threads to no more than the number of cores that you have on your machine (If you don'd know the number of cores, used the command lscpu and multiply Thread(s) per core x Core(s) per socket x Socket(s))"
\*.fasta or \*.fa,"Path to a reference file, ending with .fa or .fasta (e.g. hg38.fasta)"
\*.fastq or \*.fastq.gz,"Path to two fastq files; path to read 1 fastq file, followed by fastq file of read 2 (usually labeled as R1 and R2, respectively). Files can be in their compressed format (.fastq.gz) or uncompressed (.fastq). In case your library sequence is divided to multiple fastq files, you can use a process substitution < with the cat command (see example below)"
\-o,Sam file name to use for output results [stdout]. You can choose to skip the -o flag if you are piping the output to the next command using '|'